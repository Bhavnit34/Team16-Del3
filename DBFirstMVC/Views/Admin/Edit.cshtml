@model DBFirstMVC.Request

@{

Layout = "~/Views/Shared/adminView.cshtml";

}
@{
    ViewBag.Title = "Change the status";
    ViewBag.CurrentUserTitle = @ViewBag.CurrentUser;
}

<h2>Change the status</h2>

@using (Html.BeginForm()) {
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>Request</legend>
        @{
        var day = "";
        var time = "";

       

        
        if (Model.DayID == 1)
    {
        day = "Monday";

    }

    else if (Model.DayID == 2)
    {
        day = "Tuesday";


    }
    else if (Model.DayID == 3)
    {
        day = "Wednesday";



    }

    else if (Model.DayID == 4)
    {
        day = "Thursday";
    }
    else
    {
        day = "Friday";
    }
       
        switch (Model.PeriodID)
    {
        case 1: time = "9:00";
            break;
        case 2: time = "10:00";
            break;
        case 3: time = "11:00";
            break;
        case 4: time = "12:00";
            break;
        case 5: time = "13:00";
            break;
        case 6: time = "14:00";
            break;
        case 7: time = "15:00";
            break;
        case 8: time = "16:00";
            break;
        case 9: time = "17:00";
            break;
    }
    }

        @Html.HiddenFor(model => model.RequestID)

        <div class="editor-label">
            @Html.LabelFor(model => model.UserID, "User")
        </div>
        <div class="editor-field">
            @Html.DisplayFor(model => model.User.Dept.FullDept)
             @Html.HiddenFor(model => model.UserID)
            @Html.ValidationMessageFor(model => model.UserID)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.ModCode, "Module")
        </div>
        <div class="editor-field">
             @Html.DisplayFor(modelItem => modelItem.Module.Title)
             @Html.HiddenFor(model => model.ModCode)
            @Html.ValidationMessageFor(model => model.ModCode)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.SessionType, "Session")
        </div>
        <div class="editor-field">
           @Html.DisplayFor(model => model.SessionType)
            @Html.HiddenFor(model => model.SessionType)
            @Html.ValidationMessageFor(model => model.SessionType)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.SessionLength, "Session Length")
        </div>
        <div class="editor-field">
              @Html.DisplayFor(model => model.SessionLength)
             @Html.HiddenFor(model => model.SessionLength)
            @Html.ValidationMessageFor(model => model.SessionLength)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.DayID, "Day")
        </div>
        <div class="editor-field">
             @day
             @Html.HiddenFor(model => model.DayID)
            @Html.ValidationMessageFor(model => model.DayID)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.PeriodID, "Time")
        </div>
        <div class="editor-field">
              @time
             @Html.HiddenFor(model => model.PeriodID)
            @Html.ValidationMessageFor(model => model.PeriodID)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.PriorityRequest, "Priority Request")
        </div>
        <div class="editor-field">
              @{
                    if(Model.PriorityRequest == 1){
                        @Html.CheckBox("Priority",true, new{@disabled = "disabled"})
                    }
                    else{
                        @Html.CheckBox("Priority",false, new{@disabled = "disabled"})
                    }
        
              }
             @Html.HiddenFor(model => model.PriorityRequest)
            @Html.ValidationMessageFor(model => model.PriorityRequest)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.AdhocRequest, "AdHoc")
        </div>
        <div class="editor-field">
              @{
                    if(Model.AdhocRequest == 1){
                        @Html.CheckBox("Adhoc",true, new{@disabled = "disabled"})
                    }
                    else{
                        @Html.CheckBox("Adhoc",false, new{@disabled = "disabled"})
                    }
        
              }
             @Html.HiddenFor(model => model.AdhocRequest)
            @Html.ValidationMessageFor(model => model.AdhocRequest)
        </div>
        @if (Model.SpecialRequirements!=null){
        <div class="editor-label">
            @Html.LabelFor(model => model.SpecialRequirements, "Special Requirements")
        </div>}
        <div class="editor-field">
             @Html.DisplayFor(model => model.SpecialRequirements)
             @Html.HiddenFor(model => model.SpecialRequirements)
            @Html.ValidationMessageFor(model => model.SpecialRequirements)
        </div>
        
        <div class="editor-label">
            @Html.LabelFor(model => model.Semester)
        </div>
        <div class="editor-field">
             @Html.DisplayFor(model => model.Semester)
             @Html.HiddenFor(model => model.Semester)
            @Html.ValidationMessageFor(model => model.Semester)
        </div>

   
       
             @Html.HiddenFor(model => model.WeekID)
         
       

        <div class="editor-label">
            @Html.LabelFor(model => model.RoundID, "Round")
        </div>
        <div class="editor-field">
            @Html.DisplayFor(model => model.RoundID)
             @Html.HiddenFor(model => model.RoundID)
            @Html.ValidationMessageFor(model => model.RoundID)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Status)
        </div>
             <div>@ViewData["error"]</div>   
        <div class="editor-field">
                     @{
                            List<SelectListItem> listItems= new List<SelectListItem>();
                            listItems.Add(new SelectListItem { Text = "Pending", Value = "0" });
                          
                            listItems.Add(new SelectListItem{Text = "Rejected", Value = "2"});
                      
                        }

                        @Html.DropDownListFor(model => model.Status, listItems, "-------- Select --------")   
            @Html.ValidationMessageFor(model => model.Status)
        </div>

        <p>
            <input type="submit" value="Save" />
        </p>
    </fieldset>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
